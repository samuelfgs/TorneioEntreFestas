// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: verTqurZzkaRSaGwvFXmnc
// Component: W_H4LjYWu5
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TableRow from "../../TableRow"; // plasmic-import: 4330L__8c4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_torneio_entre_festas.module.css"; // plasmic-import: verTqurZzkaRSaGwvFXmnc/projectcss
import sty from "./PlasmicTable.module.css"; // plasmic-import: W_H4LjYWu5/css

export type PlasmicTable__VariantMembers = {};

export type PlasmicTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicTable__VariantsArgs;
export const PlasmicTable__VariantProps = new Array<VariantPropType>();

export type PlasmicTable__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTable__ArgsType;
export const PlasmicTable__ArgProps = new Array<ArgPropType>("children");

export type PlasmicTable__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultTableProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicTable__RenderFunc(props: {
  variants: PlasmicTable__VariantsArgs;
  args: PlasmicTable__ArgsType;
  overrides: PlasmicTable__OverridesType;
  dataFetches?: PlasmicTable__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bgS54)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__xODx4)}>
            <div className={classNames(projectcss.all, sty.freeBox__hBaaW)} />
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__bvw3)}>
            <div className={classNames(projectcss.all, sty.freeBox___29HoB)}>
              {p.renderPlasmicSlot({
                defaultContents: "Tenista",
                value: args.children
              })}
            </div>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__ccUa1)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sY3V
              )}
            >
              {"V"}
            </div>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__mlZLu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Wzuv
              )}
            >
              {"D"}
            </div>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__zj7Np)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__usx4D
              )}
            >
              {"GV"}
            </div>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__hmp2B)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qLDag
              )}
            >
              {"GP"}
            </div>
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__quWci)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__epFtG
              )}
            >
              {"SG"}
            </div>
          </div>
        ) : null}
      </p.Stack>

      <TableRow
        className={classNames("__wab_instance", sty.tableRow__wAzD)}
        name={"Crispiniano"}
        pos={"1"}
        wins={"0"}
      />

      <TableRow
        className={classNames("__wab_instance", sty.tableRow___0As2B)}
        name={"Fabio Rodrigo"}
        pos={"1"}
        wins={"0"}
      />

      <TableRow
        className={classNames("__wab_instance", sty.tableRow___5SR8O)}
        name={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yYtZo
            )}
          >
            {"Gabriel"}
          </div>
        }
        pos={"1"}
        wins={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iw2OL
            )}
          >
            {"0"}
          </div>
        }
      />

      <TableRow
        className={classNames("__wab_instance", sty.tableRow__w3Q9H)}
        name={"Marcelo"}
        pos={"1"}
        wins={"0"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTable__VariantsArgs;
    args?: PlasmicTable__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTable__Fetches;
  } & Omit<PlasmicTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTable__ArgProps,
      internalVariantPropNames: PlasmicTable__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTable__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTable";
  } else {
    func.displayName = `PlasmicTable.${nodeName}`;
  }
  return func;
}

export const PlasmicTable = Object.assign(
  // Top-level PlasmicTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicTable
    internalVariantProps: PlasmicTable__VariantProps,
    internalArgProps: PlasmicTable__ArgProps
  }
);

export default PlasmicTable;
/* prettier-ignore-end */
