// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: verTqurZzkaRSaGwvFXmnc
// Component: TGRouhUaEx
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Table from "../../Table"; // plasmic-import: W_H4LjYWu5/component
import MatchTable from "../../MatchTable"; // plasmic-import: PaLU3rBawjK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_torneio_entre_festas.module.css"; // plasmic-import: verTqurZzkaRSaGwvFXmnc/projectcss
import sty from "./PlasmicGroup.module.css"; // plasmic-import: TGRouhUaEx/css

export type PlasmicGroup__VariantMembers = {};

export type PlasmicGroup__VariantsArgs = {};
type VariantPropType = keyof PlasmicGroup__VariantsArgs;
export const PlasmicGroup__VariantProps = new Array<VariantPropType>();

export type PlasmicGroup__ArgsType = {};
type ArgPropType = keyof PlasmicGroup__ArgsType;
export const PlasmicGroup__ArgProps = new Array<ArgPropType>();

export type PlasmicGroup__OverridesType = {
  root?: p.Flex<"div">;
  table?: p.Flex<typeof Table>;
  matchTable?: p.Flex<typeof MatchTable>;
};

export interface DefaultGroupProps {
  className?: string;
}

function PlasmicGroup__RenderFunc(props: {
  variants: PlasmicGroup__VariantsArgs;
  args: PlasmicGroup__ArgsType;
  overrides: PlasmicGroup__OverridesType;
  dataFetches?: PlasmicGroup__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__q5Ju4)}>
        <div className={classNames(projectcss.all, sty.freeBox__koqgS)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z6GyL
            )}
          >
            {"Grupo A"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tIqnI)}
        >
          <Table
            data-plasmic-name={"table"}
            data-plasmic-override={overrides.table}
            className={classNames("__wab_instance", sty.table)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c5F1I
            )}
          >
            {"Jogos"}
          </div>

          <MatchTable
            data-plasmic-name={"matchTable"}
            data-plasmic-override={overrides.matchTable}
            className={classNames("__wab_instance", sty.matchTable)}
          />
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "table", "matchTable"],
  table: ["table"],
  matchTable: ["matchTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  table: typeof Table;
  matchTable: typeof MatchTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGroup__VariantsArgs;
    args?: PlasmicGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicGroup__Fetches;
  } & Omit<PlasmicGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGroup__ArgProps,
      internalVariantPropNames: PlasmicGroup__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicGroup__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGroup";
  } else {
    func.displayName = `PlasmicGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicGroup = Object.assign(
  // Top-level PlasmicGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    table: makeNodeComponent("table"),
    matchTable: makeNodeComponent("matchTable"),

    // Metadata about props expected for PlasmicGroup
    internalVariantProps: PlasmicGroup__VariantProps,
    internalArgProps: PlasmicGroup__ArgProps
  }
);

export default PlasmicGroup;
/* prettier-ignore-end */
